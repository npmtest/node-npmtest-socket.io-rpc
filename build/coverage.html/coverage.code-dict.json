{"/home/travis/build/npmtest/node-npmtest-socket.io-rpc/test.js":"/* istanbul instrument in package npmtest_socket_io_rpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/lib.npmtest_socket.io_rpc.js":"/* istanbul instrument in package npmtest_socket_io_rpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socket_io_rpc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socket_io_rpc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socket.io-rpc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socket_io_rpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socket_io_rpc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socket_io_rpc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_socket_io_rpc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socket_io_rpc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_socket_io_rpc.__dirname + '/lib.npmtest_socket_io_rpc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/node_modules/socket.io-rpc/main.js":"require('o.extend')\n\nvar socketIO = require('socket.io')\nvar socketEventHandlers = require('./socket.io-rpc-event-handlers/socket-event-handlers')\n/**\n * Shares the same signature as express.js listen method, because it passes arguments to it when first argument is number\n * @param {Number|Object} port or http server\n * @param {String} [hostname]\n * @param {Function} [Callback]\n * @returns {{expose: Function, loadClientChannel: Function, channel: Object}} rpc backend instance\n */\nfunction RPCserver () {\n  var server\n  if (typeof arguments[0] === 'number') {\n    server = require('http').createServer()\n    server.listen.apply(server, arguments)\n  } else {\n    server = arguments[0]\n  }\n\n  var io = socketIO(server, arguments[1])\n\n  var rpcServer = {\n    io: io.of('/rpc'),\n    /**\n     * @param toExtendWith {Object}\n     */\n    expose: function (toExtendWith) {\n      if (typeof toExtendWith !== 'object') {\n        throw new TypeError('object expected as first argument')\n      }\n      Object.extend(tree, toExtendWith)\n    },\n    server: server\n  }\n  var tree = {}\n  rpcServer.io.on('connect', function (socket) {\n    socketEventHandlers(socket, tree, 'server')\n  })\n\n  return rpcServer\n}\n\nmodule.exports = RPCserver\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/node_modules/socket.io-rpc/socket.io-rpc-event-handlers/socket-event-handlers.js":"var logger = require('debug')\nvar traverse = require('traverse')\nvar co = require('co')\nvar errToPOJO = require('./lib/err-serialization')\nvar noop = function () {}\n\nfunction isGeneratorFunction (fn) {\n  return typeof fn === 'function' &&\n    fn.constructor &&\n    fn.constructor.name === 'GeneratorFunction'\n}\n/**\n * @param {Object} socket\n * @param {Object} tree\n * @param {String} clientOrServer\n */\nmodule.exports = function (socket, tree, clientOrServer) {\n  var debug = logger('socket.io-rpc:' + clientOrServer)\n  /**\n   * for external use, simple function is used rather than an event emitter, because we lack event emitter in the browser\n   * @type {{batchStarts: Function, batchEnds: Function, wasCalled: Function, calling: Function, response: Function}}\n   */\n  var eventHandlers = {\n    batchStarts: noop,\n    batchEnds: noop,\n    calling: noop,\n    wasCalled: noop,\n    response: noop\n  }\n  var socketId\n  var deferreds = []\n\n  var invocationCounter = 0\n  var endCounter = 0\n  var remoteCallEnded = function (Id) {\n    if (deferreds[Id]) {\n      delete deferreds[Id]\n      endCounter++\n      eventHandlers.response(endCounter)\n\n      if (endCounter === invocationCounter) {\n        eventHandlers.batchEnds(endCounter)\n        invocationCounter = 0\n        endCounter = 0\n      }\n    } else {\n      // the client can maliciously try and resolve/reject something more than once. We should not throw an error on this, just warn\n      throw new Error('Deferred Id ' + Id + ' was resolved/rejected more than once, this should not occur')\n    }\n  }\n\n  /**\n   * @param {String} fnPath\n   * @returns {Function} which will call the backend/client when executed\n   */\n  function prepareRemoteCall (fnPath, argumentLength) {\n    function remoteCall () {\n      var args = Array.prototype.slice.call(arguments, 0)\n      return new Promise(function (resolve, reject) {\n        if (clientOrServer === 'server' && rpc.disconnected) {\n          return reject(new Error('socket ' + socketId + ' disconnected, call rejected'))\n        }\n        invocationCounter++\n        debug('calling ', fnPath, 'on ', socketId, ', invocation counter ', invocationCounter)\n        var callParams = {Id: invocationCounter, fnPath: fnPath, args: args}\n        socket.emit('call', callParams)\n        eventHandlers.calling(callParams)\n        if (invocationCounter === 1) {\n          eventHandlers.batchStarts(invocationCounter)\n        }\n        deferreds[invocationCounter] = {resolve: resolve, reject: reject}\n      })\n    }\n\n    remoteCall.remoteLength = argumentLength\n\n    return remoteCall\n  }\n  var rpc = prepareRemoteCall\n  socket.rpc = rpc\n  socket.rpc.events = eventHandlers\n\n  /**\n   * @type {boolean} indicates when client is disconnected\n   */\n  rpc.disconnected = false\n\n  if (clientOrServer === 'client') {\n    rpc.initializedP = new Promise(function (resolve, reject) {\n      var assignAndResolveInitP = function () {\n        socketId = socket.io.engine.id\n        resolve()\n      }\n      socket.on('connect', function () {\n        assignAndResolveInitP()\n        debug('connected socket ', socketId)\n      }).on('connect_error', function (err) {\n        if (!socketId) {\n          reject(err)\n        }\n      }).on('reconnect', function () {\n        if (!socketId) {\n          assignAndResolveInitP()\n        }\n        debug('reconnected rpc socket', socketId)\n        rpc.disconnected = false\n      })\n    })\n  } else {\n    socketId = socket.id\n  }\n\n  socket.on('disconnect', function onDisconnect () {\n    rpc.disconnected = true\n  }).on('connect_error', function (err) {\n    debug('connect error: ', err)\n  }).on('call', function (data) {\n    debug('invocation with ', data)\n    if (!(data && typeof data.Id === 'number')) {\n      return socket.emit('rpcError', {\n        reason: 'Id is a required property for a call data payload'\n      })\n    }\n\n    /**\n     * @param {String} resType\n     * @param {*} resData\n     */\n    var emitRes = function (resType, resData) {\n      resData.Id = data.Id\n      socket.emit(resType, resData)\n      eventHandlers.wasCalled(data, resData)\n    }\n\n    try {\n      var method = traverse(tree).get(data.fnPath.split('.'))\n    } catch (err) {\n      debug(err, ' when resolving an invocation')\n      return emitRes('reject', errToPOJO(err))\n    }\n    if (method && method.apply) { // we could also check if it is a function, but this might be bit faster\n      var retVal\n      if (isGeneratorFunction(method)) {\n        method = co.wrap(method)\n      }\n      try {\n        retVal = method.apply(socket, data.args)\n      } catch (err) {\n        debug('RPC method invocation ' + data.fnPath + 'from ' + socket.id + ' thrown an error : ', err.stack)\n        emitRes('reject', errToPOJO(err))\n        return\n      }\n      Promise.resolve(retVal).then(function (asyncRetVal) {\n        emitRes('resolve', {value: asyncRetVal})\n      }, function (error) {\n        emitRes('reject', errToPOJO(error))\n      })\n    } else {\n      var msg = 'no function exposed on: ' + data.fnPath\n      debug(msg)\n      emitRes('reject', {error: {message: msg}})\n    }\n  }).on('fetchNode', function (path, resCB) {\n    debug('fetchNode handler, path ', path)\n\n    var methods = tree\n    if (path) {\n      methods = traverse(tree).get(path.split('.'))\n    } else {\n      methods = tree\n    }\n\n    if (!methods) {\n      resCB({path: path})\n      debug('socket ', socketId, ' requested node ' + path + ' which was not found')\n      return\n    }\n    var localFnTree = traverse(methods).map(function (el) {\n      if (this.isLeaf) {\n        return el.length\n      } else {\n        return el\n      }\n    })\n    resCB({path: path, tree: localFnTree})\n    debug('socket ', socketId, ' requested node \"' + path + '\" which was sent as: ', localFnTree)\n  }).on('resolve', function (data) {\n    deferreds[data.Id].resolve(data.value)\n    remoteCallEnded(data.Id)\n  }).on('reject', function (data) {\n    deferreds[data.Id].reject(data.error)\n    remoteCallEnded(data.Id)\n  })\n\n  /**\n   * @param {String} path\n   * @returns {Promise}\n   */\n  socket.rpc.fetchNode = function (path) {\n    return new Promise(function (resolve, reject) {\n      socket.once('connect_error', function (err) {\n        debug('connect error: ', err)\n        reject(err)\n      })\n      debug('fetchNode ', path)\n      socket.emit('fetchNode', path, function (data) {\n        if (data.tree) {\n          var remoteMethods = traverse(data.tree).map(function (el) {\n            if (this.isLeaf) {\n              debug('path', this.path)\n              var path = this.path.join('.')\n              if (data.path) {\n                path = data.path + '.' + path\n              }\n\n              this.update(prepareRemoteCall(path, el))\n            }\n          })\n          resolve(remoteMethods)\n        } else {\n          var err = new Error('Node is not defined on the socket ' + socketId)\n          err.path = data.path\n          reject(err)\n        }\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/node_modules/socket.io-rpc/socket.io-rpc-event-handlers/lib/err-serialization.js":"var traverse = require('traverse')\nvar serializeError = require('serialize-error')\n\nvar errToPOJO\nif (typeof process !== 'undefined' && process.env.NODE_ENV === 'production') {\n  errToPOJO = function (err) {\n    traverse(err).forEach(function (x) {\n      if (this.key === 'stack') this.remove()\n    })\n    return {error: serializeError(err)}\n  }\n} else {\n  errToPOJO = function (err) {\n    return {error: serializeError(err)}\n  }\n}\n\nmodule.exports = errToPOJO\n","/home/travis/build/npmtest/node-npmtest-socket.io-rpc/node_modules/socket.io-rpc/console-shim.js":"if (!window.console) { // fuck IE 8 and 9 for not having a console\n  var noOp = function () {}\n  console = {\n    log: noOp,\n    warn: noOp,\n    error: noOp\n  }\n}\n"}